power.t.test(power=.8, n=26,sd=1)$delta
power.t.test(power=.8, n=26,sd=1, type="one.sample", alt="one.sided")$delta
power.t.test(power=.8, n=27,sd=1, type="one.sample", alt="one.sided")$delta
pvalues
pValues
head(pValues)
sum(pValues)
sum(pValues<0.05)
FWER
d
sum(p.adjust(pValues,method="bonferroni") < 0.05)
s
sum(p.adjust(pValues,method="BH") < 0.05)
d
tail(trueStatus)
d
table(pValues2 < 0.05, trueStatus)
s
24/500
c
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
d
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam)
resam <- matrix(sam,B,nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
resampledMeds/sqrt(1000)
resampledMedians/sqrt(1000)
sd(resampledMedians)
quantile(resampledMedians, c(.025,.975))
quantile(resampledMedians, c(.025,.975))
quantile(meds,c(.025,.975))
dim(insectSprays)
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
k
range(Cdata$count)
BCcounts
b
d
group
testStat
d
obs <- testStat(BCcounts,group)
obs
s
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
s
mean(perms>obs)
g
testStat(DEcounts,group)
perms <- sapply(1 : 10000,function(i) testStat(DEcounts, sample(group)))
install_from_swirl("Regression Models")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regline <- lm(child~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
fit <-lm(child~parent, galtom)
fit <-lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols <- fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var()
varChild <- var(galton$child)
varRes <-var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes, varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(mag+dist, efit$residuals)
cov(attenu$mag+attenu$dist, efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
lnor <- lm(gpa_nor~gch_nor)
lnor <- lm(gch_nor~gpa_nor)
l_nor <- lm(gch_nor~gpa_nor)
fit <- lm(child~parent, galton)
n
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <-  galton$child - mu
sTot <-  sum((galton$child - mu)^2)
s
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility~., data=swiss)
all <- lm(Fertility~., data=swiss)
summary(all)
summary(lm(Fertility~agriculture, data=swiss))
summary(lm(Fertility~agriculture, data=swiss))
l
s
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~.+ec)
efit <- lm(Fertility~.+ec, data=swiss)
s
"all$coefficients-efit$coefficients
all$coefficients-efit$coefficients
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\repdata\\RepData_PeerAssessment2")
library(ggplot2)
stormData = read.csv("repdata-data-StormData.csv")
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\repdata\\RepData_PeerAssessment2")
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\repdata\\RepData_PeerAssessment2")
stormData = read.csv("repdata-data-StormData.csv")
setwd("C:\\Users\\Karim\\Downloads\\repdata-data-StormData.csv")
stormData = read.csv("repdata-data-StormData.csv")
sumFatalities = aggregate(x=list(FATALITIES=stormData$FATALITIES), by=list(EVTYPE=stormData$EVTYPE), FUN=sum)
sumFatalities$EVTYPE = as.character(sumFatalities$EVTYPE)
sumFatalities = head(sumFatalities[order(sumFatalities$FATALITIES, decreasing=TRUE),],10)
rownames(sumFatalities) = NULL
sumFatalities = aggregate(x=list(SUM_FATALITIES=stormData$FATALITIES), by=list(EVTYPE=stormData$EVTYPE), FUN=sum)
sumFatalities$EVTYPE = as.character(sumFatalities$EVTYPE)
sumFatalities = head(sumFatalities[order(sumFatalities$SUM_FATALITIES, decreasing=TRUE),],10)
rownames(sumFatalities) = NULL
avgFatalities = aggregate(x=list(AVG_FATALITIES=stormData$FATALITIES), by=list(EVTYPE=stormData$EVTYPE), FUN=mean)
topTen = order(sumFatalities$SUM_FATALITIES, decreasing=TRUE)
topTen
sumFatalities = aggregate(x=list(SUM_FATALITIES=stormData$FATALITIES), by=list(EVTYPE=stormData$EVTYPE), FUN=sum)
sumFatalities$EVTYPE = as.character(sumFatalities$EVTYPE)
topTen = head(order(sumFatalities$SUM_FATALITIES, decreasing=TRUE),10)
topTen
sumFatalities = sumFatalities[topTen, ]
sumFatalities
avgFatalities$EVTYPE = as.character(sumFatalities$EVTYPE)
avgFatalities = aggregate(x=list(AVG_FATALITIES=stormData$FATALITIES), by=list(EVTYPE=stormData$EVTYPE), FUN=mean)
avgFatalities
avgFatalities$EVTYPE = as.character(sumFatalities$EVTYPE)
avgFatalities$EVTYPE
avgFatalities$EVTYPE = as.character(avgFatalities$EVTYPE)
avgFatalities$EVTYPE
topTen = head(order(avgFatalities$AVG_FATALITIES, decreasing=TRUE),10)
topTen
avgFatalities = avgFatalities[topTen,]
avgFatalities
stormData$INJURIES
names(stormData)
head(stormData$PROBDMG)
head(stormData$PROPDMG)
head(stormData$PROPDMGEXP)
avgInjuries = aggregate(x=list(AVG_INJURIES=stormData$INJURIES), by=list(EVTYPE=stormData$EVTYPE), FUN=mean)
avgFatalities$EVTYPE = as.character(avgFatalities$EVTYPE)
topTen = head(order(avgFatalities$AVG_FATALITIES, decreasing=TRUE),10)
avgFatalities = avgFatalities[topTen,]
rownames(avgFatalities) = NULL
avgFatalities
sumInjuries = aggregate(x=list(SUM_INJURIES=stormData$INJURIES), by=list(EVTYPE=stormData$EVTYPE), FUN=sum)
sumInjuries$EVTYPE = as.character(sumInjuries$EVTYPE)
topTen = head(order(sumInjuries$SUM_INJURIES, decreasing=TRUE),10)
sumInjuries = sumInjuries[topTen,]
rownames(sumInjuries) = NULL
sumInjuries
sumInjuries = aggregate(x=list(SUM_INJURIES=stormData$INJURIES), by=list(EVTYPE=stormData$EVTYPE), FUN=mean)
sumInjuries = aggregate(x=list(SUM_INJURIES=stormData$INJURIES), by=list(EVTYPE=stormData$EVTYPE), FUN=sum)
sumInjuries$EVTYPE = as.character(sumInjuries$EVTYPE)
topTen = head(order(sumInjuries$SUM_INJURIES, decreasing=TRUE),10)
sumInjuries = sumInjuries[topTen,]
rownames(sumInjuries) = NULL
sumInjuries
avgInjuries = aggregate(x=list(AVG_INJURIES=stormData$INJURIES), by=list(EVTYPE=stormData$EVTYPE), FUN=mean)
avgInjuries$EVTYPE - as.character(avgInjuries$EVTYPE)
avgInjuries$EVTYPE = as.character(avgInjuries$EVTYPE)
topTen = head(order(avgInjuries$EVTYPE, decreasing=TRUE),10)
avgInjuries = avgInjuries[topTen,]
rownames(avgInjuries) = NULL
avgInjuries
topTen = head(order(avgInjuries$AVG_INJURIES, decreasing=TRUE),10)
avgInjuries = avgInjuries[topTen,]
avgInjuries
avgInjuries = aggregate(x=list(AVG_INJURIES=stormData$INJURIES), by=list(EVTYPE=stormData$EVTYPE), FUN=mean)
avgInjuries$EVTYPE = as.character(avgInjuries$EVTYPE)
topTen = head(order(avgInjuries$AVG_INJURIES, decreasing=TRUE),10)
avgInjuries = avgInjuries[topTen,]
rownames(avgInjuries) = NULL
avgInjuries
sumFatalities
avgFatalities
sumInjuries
avgInjuries
sumPropertyDamage = aggregate(x=list(SUM_PROPDMG=stormData$PROPDMG), by=list(EVTYPE=stormData$EVTYPE), FUN=sum)
sumPropertyDamage$EVTYPE = as.character(sumPropertyDamage$EVTYPE)
topTen = head(order(sumPropertyDamage$SUM_PROPDMG, decreasing=TRUE),10)
sumPropertyDamage = sumPropertyDamage[topTen,]
rownames(sumPropertyDamage) = NULL
sumPropertyDamage
avgPropertyDamage = aggregate(x=list(AVG_PROPDMG=stormData$PROPDMG), by=list(EVTYPE=stormdata$EVTYPE), FUN=mean)
avgPropertyDamage = aggregate(x=list(AVG_PROPDMG=stormData$PROPDMG), by=list(EVTYPE=stormData$EVTYPE), FUN=mean)
avgPropertyDamage$EVTYPE = as.character(avgPropertyDamage$EVTYPE)
topTen = head(order(avgPropertyDamage$AVG_PROPDMG, decreasing=TRUE),10)
avgPropertyDamage = avgPropertyDamage[topTen, ]
rownames(avgPropertyDamage) = NULL
avgPropertyDamage
graph = ggplot(data=sumFatalities, aes(x=EVTYPE, y=FATALITIES))
graph = graph + geom_bar(stat="identity")
graph = graph + theme(axis.text.x=element_text(angle=-90))
graph = graph + labs(title="Top 10 Events by Fatality", x="Event Type", y="Nuber of Fatalities")
graph
graph = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
graph = graph + geom_bar(stat="identity")
graph = graph + theme(axis.text.x=element_text(angle=-90))
graph = graph + labs(title="Top 10 Events by Fatality", x="Event Type", y="Nuber of Fatalities")
graph
par=mfrow(c(1,2))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
graph = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
graph = graph + geom_bar(stat="identity")
graph = graph + theme(axis.text.x=element_text(angle=-90))
graph
graph = graph + labs(title="Top 10 Events by Fatality", x="Event Type", y="Number of Fatalities")
graph = ggplot(data=avgFatalities, aes(x=EVTYPE, y=AVG_FATALITIES))
graph = graph + geom_bar(stat="identity")
graph = graph + theme(axis.text.x=element_text(angle=-90))
graph = graph + labs(title="Top 10 Events by Fatality", x="Event Type", y="Nuber of Fatalities")
graph
par(mfrow=c(1,2))
graph = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
graph = graph + geom_bar(stat="identity")
graph = graph + theme(axis.text.x=element_text(angle=-90))
graph = graph + labs(title="Top 10 Events by Total Fatality", x="Event Type", y="Total Fatalities")
graph
graph = ggplot(data=avgFatalities, aes(x=EVTYPE, y=AVG_FATALITIES))
graph = graph + geom_bar(stat="identity")
graph = graph + theme(axis.text.x=element_text(angle=-90))
graph = graph + labs(title="Top 10 Events by Average Fatality", x="Event Type", y="Average Fatalities")
graph
gSumFatalities = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
gSumFatalities = gSumFatalities + geom_bar(stat="identity")
gSumFatalities = gSumFatalities + theme(axis.text.x=element_text(angel=-90))
gSumFatalities = gSumFatalities + labs(title="Top 10 Events by Total Fatalities", x="Event Type", y="Total Fatalities")
gSumFatalities = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
gSumFatalities = gSumFatalities + geom_bar(stat="identity")
gSumFatalities = gSumFatalities + theme(axis.text.x=element_text(angle=-90))
gSumFatalities = gSumFatalities + labs(title="Top 10 Events by Total Fatalities", x="Event Type", y="Total Fatalities")
gSumFatalities
sumFatalities
gSumFatalities = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
gSumFatalities = gSumFatalities + geom_bar(stat="identity", order=desc(sumFatalities$SUM_FATALITIES))
gSumFatalities = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
gSumFatalities = gSumFatalities + geom_bar(stat="identity", aes(order=desc(sumFatalities$SUM_FATALITIES)))
gSumFatalities = gSumFatalities + theme(axis.text.x=element_text(angle=-90))
gSumFatalities = gSumFatalities + labs(title="Top 10 Events by Total Fatalities", x="Event Type", y="Total Fatalities")
gSumFatalities
gSumFatalities = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
gSumFatalities = gSumFatalities + geom_bar(stat="identity")
gSumFatalities = gSumFatalities + theme(axis.text.x=element_text(angle=-90))
gSumFatalities = gSumFatalities + labs(title="Top 10 Events by Total Fatalities", x="Event Type", y="Total Fatalities")
gSumFatalities
gAvgFatalities = ggplot(data=avgFatalities, aes(x=EVTYPE,, y=AVG_FATALITIES))
gAvgFatalities = gAvgFatalities + geom_bar(stat="identity")
gAvgFatalities = gAvgFatalities + theme(axis.text.x=emelemt_text(angle=-90))
gAgvfatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x= "Event type" y="Total Fatalities")
gAvgFatalities = ggplot(data=avgFatalities, aes(x=EVTYPE,, y=AVG_FATALITIES))
gAvgFatalities = gAvgFatalities + geom_bar(stat="identity")
gAvgFatalities = gAvgFatalities + theme(axis.text.x=emelemt_text(angle=-90))
gAvgFatalities = gAvgFatalities + theme(axis.text.x=element_text(angle=-90))
gAgvfatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x= "Event type" y="Total Fatalities")
gAgvfatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x= "Event type", y="Total Fatalities")
gAvgFatalities
gAvgFatalities = ggplot(data=avgFatalities, aes(x=EVTYPE,, y=AVG_FATALITIES))
gAvgFatalities = gAvgFatalities + geom_bar(stat="identity")
gAvgFatalities = gAvgFatalities + theme(axis.text.x=element_text(angle=-90))
gAgvfatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x= "Event type", y="Total Fatalities")
gAvgFatalities
gSumFatalities = ggplot(data=sumFatalities, aes(x=EVTYPE, y=SUM_FATALITIES))
gSumFatalities = gSumFatalities + geom_bar(stat="identity")
gSumFatalities = gSumFatalities + theme(axis.text.x=element_text(angle=-90))
gSumFatalities = gSumFatalities + labs(title="Top 10 Events by Total Fatalities", x="Event Type", y="Total Fatalities")
gAvgFatalities = ggplot(data=avgFatalities, aes(x=EVTYPE,, y=AVG_FATALITIES))
gSumFatalities
gAvgFatalities = gAvgFatalities + geom_bar(stat="identity")
gAvgFatalities = gAvgFatalities + theme(axis.text.x=element_text(angle=-90))
gAgvfatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x= "Event type", y="Total Fatalities")
gAvgFatalities
gAvgfatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x="Event type", y="Total Fatalities")
gAvgFatalities
gAvgFatalities = ggplot(data=avgFatalities, aes(x=EVTYPE,, y=AVG_FATALITIES))
gAvgFatalities = gAvgFatalities + geom_bar(stat="identity")
gAvgFatalities = gAvgFatalities + theme(axis.text.x=element_text(angle=-90))
gAvgfatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x="Event type", y="Total Fatalities")
gAvgFatalities
gAvgFatalities = gAvgFatalities + labs(title="Top 10 Events by Average Fatalities", x="Event type", y="Total Fatalities")
gAvgFatalities
multiplot(gSumFatalities, gAvgFatalities, cols=2)
library(grid)
multiplot(gSumFatalities, gAvgFatalities, cols=2)
multiplot(gSumFatalities, gAvgFatalities, cols=2)
library(ggplot2)
multiplot(gSumFatalities, gAvgFatalities, cols=2)
library(gridExtra)
library(gridExtra)
install.packages(gridExtra)
gSumInjuries = ggplot(data=sumInjuries, aes(x=EVTYPE, y=SUM_INJURIES))
gSumInjuries = gSumInjuries + geom_bar(stat="identity")
gSumInjuries = gSumInjuries + theme(axis.text.x=element_text(angle=-90))
gSumInjuries = gSumInjuries + labs(title="Top 10 Events by Total Injuries", x="Event Type", y="Total Injuries")
gSumInjuries
gAvgInjuries = ggplot(data=AvgInjuries, aes(x=EVTYPE, y=AVG_INJURIES))
gAvgInjuries = gAvgInjuries + geom_bar(stat="identity")
gAvgInjuries = gAvgInjuries + theme(axis.text.x=element_text(angle=-90))
gAvgInjuries = gAvgInjuries + labs(title="Top 10 Events by Total Injuries", x="Event Type", y="Total Injuries")
gAvgInjuries
gAvgInjuries = ggplot(data=AvgInjuries, aes(x=EVTYPE, y=AVG_INJURIES))
AvgInjuries
gAvgInjuries = ggplot(data=avgInjuries, aes(x=EVTYPE, y=AVG_INJURIES))
gAvgInjuries = gAvgInjuries + geom_bar(stat="identity")
gAvgInjuries = gAvgInjuries + theme(axis.text.x=element_text(angle=-90))
gAvgInjuries = gAvgInjuries + labs(title="Top 10 Events by Total Injuries", x="Event Type", y="Total Injuries")
gAvgInjuries
gSumPropertyDamage = ggplot(data=sumPropertyDamage, aes(x=EVTYPE, y=SUM_PROPDMG))
gSumPropertyDamage = gSumPropertyDamage + geom_bar(stat="identity")
gSumPropertyDamage = gSumPropertyDamage + theme(axis.text.x=element_text(angle=-90))
gSumPropertyDamage = gSumPropertyDamage + labs(title="Top 10 Events by Total Property Damage", x="Event Type", y="Total PropertyDamage")
gSumPropertyDamage
gAvgPropertyDamage = ggplot(data=avgPropertyDamage, aes(x=EVTYPE, y=AVG_PROPDMG))
gAvgPropertyDamage = gAvgPropertyDamage + geom_bar(stat="identity")
gAvgPropertyDamage = gAvgPropertyDamage + theme(axis.text.x=element_text(angle=-90))
gAvgPropertyDamage = gAvgPropertyDamage + labs(title="Top 10 Events by Average Property Damage", x="Event Type", y="Average PropertyDamage")
gAvgPropertyDamage
gSumFatalites
gSumFatalities
gAvgFatalities
gSumInjuries
SumFatalities
sumFatalities
rownames(sumFatalities) = NULL
sumFatalities
gAvgFatalities
avgFatalities
gSumInjuries
sumInjuries
gAvgInjuries
avgInjuries
gSumPropertyDamage
avgPropertyDamage
sumPropertyDamage
gAvgPropertyDamage
avgPropertyDamage
file.edit(“.Rprofile”)
file.edit(".Rprofile")
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\repdata\\RepData_PeerAssessment2")
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\repdata\\peer_assessment_1")
activity = read.csv("activity.csv")
activity_complete = activity[!is.na(activity$steps),]
steps_by_day = aggregate(activity$steps, by=list(Category=activity$date), FUN=sum)
names(steps_by_day) = c("date", "num_steps")
#steps_by_day = aggregate(activity_complete$steps, by=list(Category=activity_complete$date), FUN=sum)
hist(steps_by_day$num_steps, breaks=10, main="Number of steps per day", xlab="Number of steps")
median_steps = median(steps_by_day$num_steps, na.rm=TRUE)
mean_steps = mean(steps_by_day$num_steps, na.rm=TRUE)
cat("Mean Steps = ", mean_steps)
cat("Median Steps = ", median_steps)
```
## What is the average daily activity pattern
```{r, echo=TRUE}
activity
names(activity)
steps_by_interval = aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
plot(x=steps_by_interval$interval, y=steps_by_interval$steps, main="Steps by interval", xlab="interval", ylab= "Number of Steps", type="l")
C:\Users\Karim\SkyDrive\Documents\codebase\Coursera Data Science\devdataprod\shinyApp
setwd("C:\Users\Karim\SkyDrive\Documents\codebase\Coursera Data Science\devdataprod\shinyApp")
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\devdataprod\\shinyApp")
runapp()
library("shiny")
runapp()
runApp()
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='klameer', token='7FD7DE0A9347B5FC083882A2619AE672', secret='m+IvHeavoQW8EnbPEDOLwaAxbm0z615atPh0MVqU')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rcharts)
library(rCharts)
datasets(airquality)
dataset(airquality)
library(airquality)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(RCharts)
rPlot
require(devtools)
install_github('rCharts', 'ramnathv')
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
install("slidify", "ramanathv")
install_github("slidify", "ramanathv")
library(devtools)
install_github("slidify", "ramanathv")
library(slidify)
install.packages("slidify")
library(slidify)
install_github("slidify", "ramnathv")
library(slidify)
install_github("slidifyLibraries", "ramnathv")
author("First Deck")
slidify("index.Rmd")
diamonds
diamonds
names(diamonds)
help(diamonds)
plot(diamonds$carat, diamonds$price)
par(mfrow=c(1,1))
plot(diamonds$carat, diamonds$price)
ggplot(data=diamonds, aes(x=carat, y=price))+geom_point(colour=color)
ggplot(data=diamonds, aes(x=carat, y=price))+geom_point(colour=diamonds$color)
ggplot(data=diamonds, aes(x=carat, y=price))+geom_point()
help(diamonds)
ggplot(data=diamonds, aes(x=carat, y=price))+geom_point()+geom_smooth()
data(diamonds)
?data
download.data("http://karim.com")
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\rprog")
write.csv("diamonds")
diamonds
head(diamonds)
write.table(diamonds, file="diamonds.csv", header=TRUE, sep=",")
write.table(diamonds, file="diamonds.csv", sep=",")
head(diamonds)
read.csv("diamonds.csv", colClasses=c(carat="numeric))
)
))
LL
C:\Users\Karim\SkyDrive\Documents\codebase\Coursera Data Science\rprogC:\Users\Karim\SkyDrive\Documents\codebase\Coursera Data Science\rprog
read.csv("diamonds.csv", colClasses=c(carat="numeric), header=TRUE)
""
"
read.csv("diamonds.csv", colClasses=c(carat="numeric"), header=TRUE)
diamonds2 = read.csv("diamonds.csv", colClasses=c(carat="numeric"), header=TRUE)
diamonds2
head(diamonds2)
diamondsSubset = subset(diamonds, cut="Premium" & color="E")
diamondsSubset = subset(diamonds, cut=="Premium" & color=="E")
diamondsSubset
diamondSubset = diamonds[cut=="Premium" & color=="E",]
diamondSubset = diamonds[diamonds$cut=="Premium" & diamonds$color=="E",]
diamondSubset
head(diamonds2)
diamondSubset = diamonds[diamonds$cut=="Premium" & diamonds$color=="E",c("x", "y", "z")]
diamondSubset
head(diamonds2)
setwd("C:\Users\Karim\SkyDrive\Documents\codebase\Coursera Data Science\rprog")
setwd("C:\\Users\\Karim\\SkyDrive\\Documents\\codebase\\Coursera Data Science\\rprog")
library(ggplot2)
summary(cars)
cars
names(cars)
plot(cars)
write.table(data=cars, file="cars.csv", sep=",")
write.table(cars, file="cars.csv", sep=",")
write.table(diamonds, file="diamonds.csv", sep=",")
?read.csv
names(diamonds2)
head(diamonds2)
diamonds2 = read.csv(file="diamonds.csv", colClasses=c(carat="numeric"))
diamonds2
